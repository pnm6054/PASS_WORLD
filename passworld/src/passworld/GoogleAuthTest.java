package passworld;

import com.warrenstrange.googleauth.*;
import com.warrenstrange.googleauth.GoogleAuthenticatorConfig.GoogleAuthenticatorConfigBuilder;

import java.math.BigInteger;
import java.sql.*;
import java.util.List;
import java.util.concurrent.TimeUnit;


/**
 * Not really a unit test, but it shows the basic usage of GoogleAuth.jar.
 * To properly test the authenticator, manual intervention and multiple steps
 * are required:
 * <ol>
 * <li>Run the test in order to generate the required information for a
 * Google Authenticator application to be configured.</li>
 * <li>Set the <code>SECRET_KEY</code> field with the value generated by the
 * <code>GoogleAuthTest#createCredentials</code> method.</li>
 * <li>Generate the current code with the Google Authenticator application and
 * set the <code>VALIDATION_CODE</code> accordingly.</li>
 * <li>Check that the <code>#authorise</code> method correctly validates the
 * data when invoking the <code>GoogleAuthenticator#authorize</code> method.
 * </li>
 * </ol>
 */

/**
 *@author jinyoung.Y
 *This class related 'googleauth.jar'.
 */
public class GoogleAuthTest
{

    // Change this to the saved secret from the running the above test.

	/**
	 * @param SECRET_KEY 
	 * @param VALIDATION_CODE
	 * @param username
	 */
    private static String SECRET_KEY = "2QV45ZM5LWEEBO6L";
    private static int VALIDATION_CODE = 911556;
    private static String username = "Default";
    DBtest2 db = new DBtest2();
    
    
    public GoogleAuthTest() {
    	loadInfo();
    	setupMockCredentialRepository();
    }
   
    
    public static void setupMockCredentialRepository()
    {
        System.setProperty(
                CredentialRepositoryMock.MOCK_SECRET_KEY_NAME,
                SECRET_KEY);
    }

    private static byte[] hexStr2Bytes(String hex)
    {
        // Adding one byte to get the right conversion
        // Values starting with "0" can be converted
        byte[] bArray = new BigInteger("10" + hex, 16).toByteArray();

        // Copy all the REAL bytes, not the "first"
        byte[] ret = new byte[bArray.length - 1];
        System.arraycopy(bArray, 1, ret, 0, ret.length);

        return ret;
    }
    
    /**
     * 'main' method is test method to test
     * whether this works correctly without other class.
     * */
    
    /*
    public static void main(String[] args) {
    	
    	setupMockCredentialRepository();
    	//createCredentialsForUser();
    	System.out.println(SECRET_KEY);
    	authoriseUser("201561");

    	System.out.println(VALIDATION_CODE);
    }*/
    
    /**
     * This method is create credentials for user.
     * key is credential for generate secret key.
     * SECRET_KEY is the secret key.
     * This method shows the secret key and QRcode after running this method.
     * 
     * @param otpAuthURL
     * @param name
     * @param email
     */
    public static void createCredentialsForUser(String name, String email)
    {
        GoogleAuthenticator googleAuthenticator = new GoogleAuthenticator();

        final GoogleAuthenticatorKey key =
                googleAuthenticator.createCredentials(name);
        final String SECRET_KEY = key.getKey();
        //final List<Integer> scratchCodes = key.getScratchCodes();

        String otpAuthURL = GoogleAuthenticatorQRGenerator.getOtpAuthURL(name, email, key);

        registerInfo(name,SECRET_KEY);
        System.out.println("Please register (otpauth uri): " + otpAuthURL);
        System.out.println("Secret key is " + SECRET_KEY);
    }

    /**
     * 'authoriseUser' method determines whether the OTP code generated by user 
     * and the OTP code generated by PassWorld are the same.
     * If this method determines they are same, 
     * The user has the right to Log-In.
     * 
     * @param VALIDATION_CODE
     * @return true(same) or false(not same)
     */
    public static boolean authoriseUser(String VALIDATION_CODE)
    {
        GoogleAuthenticatorConfigBuilder gacb =
                new GoogleAuthenticatorConfigBuilder()
                        .setTimeStepSizeInMillis(TimeUnit.SECONDS.toMillis(30))
                        .setWindowSize(5)
                        .setCodeDigits(6);
        GoogleAuthenticator ga = new GoogleAuthenticator(gacb.build());
        boolean isCodeValid = ga.authorizeUser(username, Integer.parseInt(VALIDATION_CODE));

        System.out.println("Check VALIDATION_CODE = " + isCodeValid);
        
        return isCodeValid;
    }
    
    /** connect to db for loading Information to login
     * 
     * @param conn
     * @param stat
     * @param rs
     */
    private void loadInfo() {
    	Connection conn = null;
    	Statement stat = null;
    	ResultSet rs = null;
		try {
			// db parameters
			String url = "jdbc:sqlite:ext/main.db";
			// create a connection to the database
			conn = DriverManager.getConnection(url);
			            
			System.out.println("Connection to SQLite has been established.");
			
			stat = conn.createStatement();
			rs = stat.executeQuery("select * from Google_Auth");
			username = rs.getString("username");
			SECRET_KEY = rs.getString("secretcode");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * This method save register information in database.
     * @param username
     * @param secretcode
     */
    private static void registerInfo(String username, String secretcode) {
    	Connection conn = null;
    	PreparedStatement pstat = null;
    	int result = 0;
		try {
			// db parameters
			String url = "jdbc:sqlite:ext/main.db";
			// create a connection to the database
			conn = DriverManager.getConnection(url);
			            
			System.out.println("Connection to SQLite has been established.");
			
			pstat = conn.prepareStatement("update Google_Auth set secretcode = ?, username = ? where rowid = 1");
			pstat.setString(1, secretcode);
			pstat.setString(2, username);
			result = pstat.executeUpdate();
        } catch (SQLException e) {
            System.out.println("계정 등록 에러" + e.getMessage());
        }
    }
}