/*
 * Copyright (c) 2014-2015 Enrico M. Crisostomo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   * Neither the name of the author nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package passworld;

import com.warrenstrange.googleauth.*;
import com.warrenstrange.googleauth.GoogleAuthenticatorConfig.GoogleAuthenticatorConfigBuilder;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.math.BigInteger;
import java.net.URL;
import java.sql.*;
import java.util.concurrent.TimeUnit;

import javax.imageio.ImageIO;
import javax.swing.*;
/**
 * Not really a unit test, but it shows the basic usage of this package.
 * To properly test the authenticator, manual intervention and multiple steps
 * are required:
 * <ol>
 * <li>Run the test in order to generate the required information for a
 * Google Authenticator application to be configured.</li>
 * <li>Set the <code>SECRET_KEY</code> field with the value generated by the
 * <code>GoogleAuthTest#createCredentials</code> method.</li>
 * <li>Generate the current code with the Google Authenticator application and
 * set the <code>VALIDATION_CODE</code> accordingly.</li>
 * <li>Check that the <code>#authorise</code> method correctly validates the
 * data when invoking the <code>GoogleAuthenticator#authorize</code> method.
 * </li>
 * </ol>
 */

public class GoogleAuthTest
{

    // Change this to the saved secret from the running the above test.

	/**
	 * @param SECRET_KEY 
	 * @param VALIDATION_CODE
	 * @param username
	 */
    private static String SECRET_KEY = "2QV45ZM5LWEEBO6L";
    private static int VALIDATION_CODE = 911556;
    private static String username = "Default";
    DBtest2 db = new DBtest2();
    
    public GoogleAuthTest() {
    	loadInfo();
    	setupMockCredentialRepository();
    	
    }
   
    public static void setupMockCredentialRepository()
    {
        System.setProperty(
                CredentialRepositoryMock.MOCK_SECRET_KEY_NAME,
                SECRET_KEY);
    }

    private static byte[] hexStr2Bytes(String hex)
    {
        // Adding one byte to get the right conversion
        // Values starting with "0" can be converted
        byte[] bArray = new BigInteger("10" + hex, 16).toByteArray();

        // Copy all the REAL bytes, not the "first"
        byte[] ret = new byte[bArray.length - 1];
        System.arraycopy(bArray, 1, ret, 0, ret.length);

        return ret;
    }
    
    public static String createCredentialsForUser(String name, String email)
    {
        GoogleAuthenticator googleAuthenticator = new GoogleAuthenticator();
        DBtest2 db = new DBtest2();
        final GoogleAuthenticatorKey key =
                googleAuthenticator.createCredentials(name);
        final String SECRET_KEY = key.getKey();

        String otpAuthURL = GoogleAuthenticatorQRGenerator.getOtpAuthURL(name, email, key);
        db.registerInfo(name,SECRET_KEY);
        System.out.println("Please register (otpauth uri): " + otpAuthURL);
        System.out.println("Secret key is " + SECRET_KEY);
		
        /** pop up the QR Code when registration button clicked
         *  QR code download from internet and deposit in ext folder 
         * @author 
         */
        /*            *인터넷에서 이미지를 가져와서 저장하는 방법*
         *    http://blog.naver.com/gntvnt1/221042266094
         */        
        new QRcode(otpAuthURL); //QR코드 창 출력
        db.closeDB();
        return SECRET_KEY;
    }

    public static boolean authoriseUser(String VALIDATION_CODE)
    {
        GoogleAuthenticatorConfigBuilder gacb =
                new GoogleAuthenticatorConfigBuilder()
                        .setTimeStepSizeInMillis(TimeUnit.SECONDS.toMillis(30))
                        .setWindowSize(5)
                        .setCodeDigits(6);
        GoogleAuthenticator ga = new GoogleAuthenticator(gacb.build());
        boolean isCodeValid = ga.authorizeUser(username, Integer.parseInt(VALIDATION_CODE));

        System.out.println("Check VALIDATION_CODE = " + isCodeValid);
        
        return isCodeValid;
    }
    
    /** connect to db for loading Information to login
     * 
     * @param
     */
    private void loadInfo() {
    	Connection conn = null;
    	Statement stat = null;
    	ResultSet rs = null;
		try {
			// db parameters
			String url = "jdbc:sqlite:ext/main.db";
			// create a connection to the database
			conn = DriverManager.getConnection(url);
			            
			System.out.println("Connection to SQLite has been established.");
			
			stat = conn.createStatement();
			rs = stat.executeQuery("select * from Google_Auth");
			username = rs.getString("username");
			SECRET_KEY = rs.getString("secretcode");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
}

class QRcode extends JDialog implements MouseListener{
    BufferedImage img=null;// 버퍼(메모리)에 이미지를 올릴 때 쓰임
	Dimension d = getToolkit().getScreenSize(); //화면 크기 측정
    public QRcode(String url){
    	setTitle("클릭하면 닫힘"); 
        setSize(215,240); 
    	setLocation(d.width / 2 - getWidth() / 2, d.height / 2 - getHeight() / 2); //정중앙에 생성
    	setResizable(false); //크기조절 불가
        setVisible(true);
        try {
            img = ImageIO.read(new URL(url));// 윈도우에선 경로가 \라서 \\라고 입력해줘야 한다.
        } catch (IOException e) {// ImageIO이것을 적으면 catch문으로 예외처리를 해야 한다. 예외처리를 하도록 클래스 설계자가 적어두어서 반드시 해줘야 한다.
            // 입력과 출력이 rfid, 소켓통신, 윈도우, 임베디드 등등 입출력이 너무 다양하기 때문에..
            e.printStackTrace();
            System.out.println(e.getMessage());
            System.out.println("에러 나셨습니다!!");// 일부러 없는 파일을 열어서 에러문을 출력해봐라, (이런 프린트문의 출력은 필요없다) 이 줄을 뺀것이 예외처리의 기본형태
            System.exit(0);// 이 구문은 컴퓨터를 빠져 나와라는 것이다. 인자값 0의 의미는 0일땐 어떤게 실패, 1은 연결되었다 실패, 2는... 숫자로 의미를 부여할 수 있다.
            // 아이폰은 예외처리를 표시도 안하고(공백, 오류나도 안알려줌), 윈도우는 블루스크린을 띄워라는 것이 담겨있다.
        }
        MyPanel1 panel = new MyPanel1();
        add(panel);
        pack();
        addMouseListener(this);//클릭시 닫히는 액션
    }
    
    class MyPanel1 extends JPanel{
        public void paint(Graphics g){// 페인트 컴포넌트나 페인트나 같다.
            g.drawImage(img, 0, 0, null);
        }        
        public Dimension getPreferredSize(){// 만약 오타등으로 오버라이드가 안되었다면 툴을 이용해 불러와라
            if (img == null)
                return new Dimension(300, 300);
            else
                return new Dimension(img.getWidth(null), img.getHeight(null));// 인자값이 (null)이나 ()이나 같다.
        }
    }
    public void mouseClicked(MouseEvent arg0) {super.dispose();}
    public void mouseEntered(MouseEvent e) {}
    public void mouseExited(MouseEvent e) {}
    public void mousePressed(MouseEvent e) {}
    public void mouseReleased(MouseEvent e) {}
}

